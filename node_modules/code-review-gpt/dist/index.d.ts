declare module 'code-review-gpt/args' {
  export interface ReviewArgs {
      [x: string]: unknown;
      ci: boolean;
      commentPerFile: boolean;
      model: string;
      _: (string | number)[];
      $0: string;
  }
  export const getYargs: () => Promise<ReviewArgs>;

}
declare module 'code-review-gpt/common/ci/commentOnPR' {
  /**
   * Publish a comment on the pull request. If the bot has already commented (i.e. a comment with the same sign off exists), update the comment instead of creating a new one.
   * The comment will be signed off with the provided sign off.
   * @param comment The body of the comment to publish.
   * @param signOff The sign off to use. This also serves as key to check if the bot has already commented and update the comment instead of posting a new one if necessary.
   * @returns
   */
  export const commentOnPR: (comment: string, signOff: string) => Promise<void>;

}
declare module 'code-review-gpt/common/ci/commentPerFile' {
  import { IFeedback } from "code-review-gpt/review/llm/feedbackProcessor";
  /**
   * Publish comments on a file-by-file basis on the pull request. If the bot has already commented on a file (i.e. a comment with the same sign off exists on that file), update the comment instead of creating a new one.
   * The comment will be signed off with the provided sign off.
   * @param feedbacks The JSON feedback from the AIModel.
   * @param signOff The sign off to use. This also serves as key to check if the bot has already commented and update the comment instead of posting a new one if necessary.
   * @returns void
   */
  export const commentPerFile: (feedbacks: IFeedback[], signOff: string) => Promise<void>;

}
declare module 'code-review-gpt/common/ci/utils' {
  import { IFeedback } from "code-review-gpt/review/llm/feedbackProcessor";
  export const getRelativePath: (fileName: string, repoName: string) => string;
  export const getToken: () => string;
  export const getOctokitRepoDetails: () => {
      octokit: import("@octokit/core").Octokit & import("@octokit/plugin-rest-endpoint-methods/dist-types/types").Api & {
          paginate: import("@octokit/plugin-paginate-rest").PaginateInterface;
      };
      owner: string;
      repo: string;
      pull_number: number;
  } | undefined;
  export const commentOnFile: (octokit: any, data: CreateFileCommentData) => Promise<void>;
  export type CreateFileCommentData = {
      feedback: IFeedback;
      signOff: string;
      owner: string;
      repo: string;
      pull_number: number;
      commit_id: string;
  };

}
declare module 'code-review-gpt/common/model/AIModel' {
  interface IAIModel {
      modelName: string;
      temperature: number;
      apiKey: string;
      retryCount?: number;
  }
  class AIModel {
      private model;
      private retryCount;
      constructor(options: IAIModel);
      callModel(prompt: string): Promise<string>;
      callModelJSON<T>(prompt: string): Promise<T>;
  }
  export default AIModel;

}
declare module 'code-review-gpt/common/model/getMaxPromptLength' {
  export const getMaxPromptLength: (modelName: string) => number;

}
declare module 'code-review-gpt/config' {
  export const openAIApiKey: () => string;
  export const getGitHubEnvVariables: () => Record<string, string>;

}
declare module 'code-review-gpt/configure/index' {
  export const configure: () => Promise<void>;

}
declare module 'code-review-gpt/index' {
  export {};

}
declare module 'code-review-gpt/review/constants' {
  export const signOff = "#### Powered by [Code Review GPT](https://github.com/mattzcarey/code-review-gpt)";
  export const modelInfo: {
      model: string;
      maxPromptLength: number;
  }[];
  export const supportedFiles: Set<string>;
  export const excludedKeywords: Set<string>;
  export const maxFeedbackCount = 3;

}
declare module 'code-review-gpt/review/index' {
  interface ReviewArgs {
      [x: string]: unknown;
      ci: boolean;
      commentPerFile: boolean;
      _: (string | number)[];
      $0: string;
  }
  export const review: (yargs: ReviewArgs) => Promise<void>;
  export {};

}
declare module 'code-review-gpt/review/llm/PriorityQueue' {
  interface QueueItem<T> {
      priority: number;
      item: T;
  }
  class PriorityQueue<T> {
      private items;
      constructor(items?: QueueItem<T>[]);
      enqueue(item: T, priority: number): void;
      dequeue(): T | undefined;
      size(): number;
      peek(): QueueItem<T> | undefined;
      getItems(): T[];
  }
  export default PriorityQueue;

}
declare module 'code-review-gpt/review/llm/askAI' {
  import { IFeedback } from "code-review-gpt/review/llm/feedbackProcessor";
  type AskAIResponse = {
      markdownReport: string;
      feedbacks: IFeedback[];
  };
  export const askAI: (prompts: string[], modelName: string, verbose?: boolean) => Promise<AskAIResponse>;
  export {};

}
declare module 'code-review-gpt/review/llm/feedbackProcessor' {
  import AIModel from "code-review-gpt/common/model/AIModel";
  export interface IFeedback {
      fileName: string;
      logafScore: number;
      details: string;
  }
  const createSummary: (model: AIModel, feedbacks: IFeedback[], verbose?: boolean) => Promise<string>;
  const processFeedbacks: (model: AIModel, prompts: string[], verbose?: boolean) => Promise<IFeedback[]>;
  export { createSummary, processFeedbacks };

}
declare module 'code-review-gpt/review/llm/generateMarkdownReport' {
  import { IFeedback } from "code-review-gpt/review/llm/feedbackProcessor";
  export const formatFeedbacks: (feedbacks: IFeedback[]) => string;
  export const generateMarkdownReport: (feedbacks: IFeedback[], summary: string) => string;

}
declare module 'code-review-gpt/review/prompt/constructPrompt/constructPrompt' {
  export const constructPromptsArray: (fileNames: string[], maxPromptLength: number, isCi: boolean) => Promise<string[]>;

}
declare module 'code-review-gpt/review/prompt/constructPrompt/constructPrompt.test' {
  export {};

}
declare module 'code-review-gpt/review/prompt/fileLines/getChangedLines' {
  import { ReviewFile } from "code-review-gpt/review/prompt/types";
  export const getChangedLines: (file: ReviewFile, isCi: boolean) => Promise<string>;

}
declare module 'code-review-gpt/review/prompt/filesNames/getFileNames' {
  export const getFileNames: (isCi: boolean) => Promise<string[]>;

}
declare module 'code-review-gpt/review/prompt/filesNames/getFileNames.test' {
  export {};

}
declare module 'code-review-gpt/review/prompt/filesNames/getFileNamesFromGit' {
  export const getFileNamesFromGit: (isCi: boolean) => Promise<string[]>;

}
declare module 'code-review-gpt/review/prompt/getLanguageOfFile' {
  import { SupportedTextSplitterLanguage } from "langchain/text_splitter";
  export const getLanguageOfFile: (fileName: string) => SupportedTextSplitterLanguage | undefined;

}
declare module 'code-review-gpt/review/prompt/gitCommands' {
  export const gitChangedFileNamesCommand: (isCi: boolean) => Promise<string>;
  export const gitChangedFileLinesCommand: (isCi: boolean, fileName: string) => Promise<string>;

}
declare module 'code-review-gpt/review/prompt/makeSlimmedFile' {
  import { ReviewFile } from "code-review-gpt/review/prompt/types";
  export const makeSlimmedFile: (file: ReviewFile, maxBatchSize: number, isCi: boolean) => Promise<ReviewFile>;

}
declare module 'code-review-gpt/review/prompt/prompts' {
  export const instructionPrompt = "As a senior developer, your task is to review a set of pull requests.\nYou are given a list of filenames and their partial contents, but note that you might not have the full context of the code.\n\nBegin your review by evaluating each code snippet using the LOGAF scale\n\nDo not include the definition of the LOGAF level selected in your review. If a code snippet is at Level 4 or 5, it does not need further review and return to a newline. For snippets at Levels 1 to 3, provide specific feedback.\nFocus on code functionality, readability, and performance. Flag any exposed API keys or secrets immediately.\n\nUse markdown formatting for the feedback details. Also do not include the filename or LOGAF level in the feedback details. Ensure the feedback details is brief, concise, accurate, and relevant. Do not give feedback on every possible change, only the most important.\nInclude brief example code snippets in the feedback details for your changes when you're confident your suggestions are improvements. Use the same programming language as the file under review.\nIf there are multiple improvements you suggest in the feedback details, use an ordered list to indicate the priority of the changes.\n\nInclude the LOGAF level together with the filename of each code snippet in the header, in bold. If the LOGAF level is 4 or 5 do not include it and simply return to a newline.\n\nFormat the response in a valid JSON format as a list of feedbacks, where the value is an object containing the filename (\"fileName\"), LOGAF score (\"logafScore\") and the feedback (\"details\"). The schema of the JSON feedback object must be:\n{\n  \"fileName\": {\n    \"type\": \"string\"\n  },\n  \"logafScore\": {\n    \"type\": \"number\"\n  },\n  \"details\": {\n    \"type\": \"string\"\n  }\n}\n\nThe filenames and file contents to review are provided below as a list of JSON objects containing the filename and the file content:\n\n";
  export const completionPrompt = "\nYou are a senior developer and have just reviewed a pull request. This was your feedback:\n{feedback}\nPlease summarise the review using 3 emojis.\n";
  export const slimmedContextPrompt = "# This file is too large to fully fit in the context window of the model. You will get the changed lines of the file and relevant context found in the file. Only review the changed lines but use the context to inform the review.\nChanged lines of the file: {fileContent}\nContext: {context} ";

}
declare module 'code-review-gpt/review/prompt/types' {
  export interface ReviewFile {
      fileName: string;
      fileContent: string;
  }

}
declare module 'code-review-gpt/test/constants' {
  export const generateCodeSnippetsPrompt = "\nYour role is to help testing a GPT application reviewing code changes. You receive a test case and you need to generate code in typescript corresponding to this test case, even if it follows bad practices or has security issues.\nThe test cases is formatted as a stringified JSON object with the following properties:\n- name: the name of the test case\n- description: the description of the test case\n\nThe input is the following:\n{testCase}\n\nReturn the content of a valid typescript file that would pass the test case.\n";
  export const testThreshold = 0.1;
  export const signOff = "#### Tests Powered by [Code Review GPT](https://github.com/mattzcarey/code-review-gpt)";

}
declare module 'code-review-gpt/test/index' {
  import { ReviewArgs } from "code-review-gpt/args";
  export const test: ({ ci, model }: ReviewArgs) => Promise<void>;

}
declare module 'code-review-gpt/test/load/hash' {
  /**
   * Generate a hash from a string
   * @param data The string to hash.
   * @returns The hash.
   */
  export const generateHash: (data: string) => string;

}
declare module 'code-review-gpt/test/load/loadSnapshots' {
  import { MemoryVectorStore } from "langchain/vectorstores/memory";
  /**
   * Load all snapshots from a directory.
   * @param shapshotsDir The directory containing the snapshots.
   * @returns The snapshots in a MemoryVectorStore.
   */
  export const loadSnapshots: (shapshotsDir: string) => Promise<MemoryVectorStore>;

}
declare module 'code-review-gpt/test/load/loadTestCases' {
  import { TestCase } from "code-review-gpt/test/types";
  /**
   * Load all test cases from a directory.
   * @param testCasesDir The directory containing the test cases.
   * @returns The test cases.
   */
  export const loadTestCases: (testCasesDir: string) => TestCase[];

}
declare module 'code-review-gpt/test/load/loadTestCodeSnippets' {
  import AIModel from "code-review-gpt/common/model/AIModel";
  import { TestCase } from "code-review-gpt/test/types";
  /**
   * Load all code snippets for a set of test cases from the cache, or generate them if they are not found.
   * @param testCases The test cases to load the code snippets for.
   * @param snippetCacheDir The directory containing the code snippet cache.
   * @param model The model to use to generate the code snippets.
   * @returns The test cases with the code snippets.
   */
  export const loadOrGenerateCodeSnippets: (testCases: TestCase[], snippetCacheDir: string, model: AIModel) => Promise<TestCase[]>;

}
declare module 'code-review-gpt/test/run/generateTestReport' {
  import { TestCase } from "code-review-gpt/test/types";
  /**
   * Possible test results.
   */
  export enum testResult {
      PASS = "PASS",
      WARN = "WARN",
      FAIL = "FAIL"
  }
  /**
   * Generate a test report for a test case.
   * @param testCase The test case.
   * @param review The review generated by the AI.
   * @param similarReview The most similar review found in the vector store.
   * @param similarity The similarity score between the review and the most similar review found in the vector store.
   * @returns The test report and the test result.
   */
  export const generateTestReport: (testCase: TestCase, review: string, similarReview: string, similarity: number) => {
      report: string;
      result: testResult;
  };
  /**
   * Generate a summary of the test results.
   * @param testResults The test results.
   * @returns The summary.
   */
  export const generateTestResultsSummary: (testResults: {
      [key: string]: testResult;
  }) => string;

}
declare module 'code-review-gpt/test/run/runTest' {
  import { MemoryVectorStore } from "langchain/vectorstores/memory";
  import { TestCase } from "code-review-gpt/test/types";
  /**
   * Run all the test cases.
   * @param testCases The test cases.
   * @param modelName The name of the model.
   * @param maxPromptLength The maximum prompt length.
   * @param vectorStore The vector store.
   * @returns The test results.
   */
  export const runTests: (testCases: TestCase[], modelName: string, maxPromptLength: number, vectorStore: MemoryVectorStore, ci: boolean) => Promise<string>;

}
declare module 'code-review-gpt/test/types' {
  export interface TestCase {
      name: string;
      description: string;
      hash?: string;
      snippet?: string;
  }

}
declare module 'code-review-gpt' {
  import main = require('code-review-gpt/src/index');
  export = main;
}